21 Nov 23:57:43 
--- [START 2017-11-21 23:57:43] ----------------------------------------------------------------


21 Nov 23:57:43 ** some experiment setting **

21 Nov 23:57:43 	out_dir      = /home/xiang/discount2017/results

21 Nov 23:57:43 	saved model    = epoch-14-acc-0.63.pkl

21 Nov 23:57:43 	initial_checkpoint = None

21 Nov 23:57:43 ** net setting **

21 Nov 23:57:48 <class 'se_inception_v3.SEInception3'>


21 Nov 23:57:48 
SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)

21 Nov 23:57:48 ** dataset setting **

21 Nov 23:57:48 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]

21 Nov 23:57:48 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]

21 Nov 23:57:48 	len(train_dataset)  = 72

21 Nov 23:57:48 	len(valid_dataset)  = 8

21 Nov 23:57:48 	len(train_loader)   = 36

21 Nov 23:57:48 	len(valid_loadernum_iters) = 4

21 Nov 23:57:48 	batch_size  = 2

21 Nov 23:57:48 	iter_accum  = 1

21 Nov 23:57:48 	batch_size*iter_accum  = 2

21 Nov 23:57:48 

21 Nov 23:57:48 ** start training here! **

21 Nov 23:57:48  optimizer=<torch.optim.sgd.SGD object at 0x7f76822bc438>

21 Nov 23:57:48  LR=<utils.MultiStepLR object at 0x7f76822bc0f0>


21 Nov 23:57:48    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   

21 Nov 23:57:48 -------------------------------------------------------------------------------------

21 Nov 23:57:57 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:11:41 	--- [START 2017-11-22 00:11:41] ----------------------------------------------------------------
22 Nov 00:11:41 ** some experiment setting **
22 Nov 00:11:41 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:11:41 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:11:41 	initial_checkpoint = None
22 Nov 00:11:41 ** net setting **
22 Nov 00:11:47 <class 'se_inception_v3.SEInception3'>
22 Nov 00:11:47 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:11:47 ** dataset setting **
22 Nov 00:11:47 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:11:47 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:11:47 	len(train_dataset)  = 72
22 Nov 00:11:47 	len(valid_dataset)  = 8
22 Nov 00:11:47 	len(train_loader)   = 36
22 Nov 00:11:47 	len(valid_loadernum_iters) = 4
22 Nov 00:11:47 	batch_size  = 2
22 Nov 00:11:47 	iter_accum  = 1
22 Nov 00:11:47 	batch_size*iter_accum  = 2

22 Nov 00:11:47 

22 Nov 00:11:47 ** start training here! **
22 Nov 00:11:47  optimizer=<torch.optim.sgd.SGD object at 0x7f94538df438>
22 Nov 00:11:47  LR=<utils.MultiStepLR object at 0x7f94538df128>
22 Nov 00:11:47    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:11:47 -------------------------------------------------------------------------------------
22 Nov 00:11:55 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:12:47 	--- [START 2017-11-22 00:12:47] ----------------------------------------------------------------
22 Nov 00:12:47 ** some experiment setting **
22 Nov 00:12:47 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:12:47 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:12:47 	initial_checkpoint = None
22 Nov 00:12:47 ** net setting **
22 Nov 00:12:53 <class 'se_inception_v3.SEInception3'>
22 Nov 00:12:53 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:12:53 ** dataset setting **
22 Nov 00:12:53 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:12:53 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:12:53 	len(train_dataset)  = 72
22 Nov 00:12:53 	len(valid_dataset)  = 8
22 Nov 00:12:53 	len(train_loader)   = 36
22 Nov 00:12:53 	len(valid_loadernum_iters) = 4
22 Nov 00:12:53 	batch_size  = 2
22 Nov 00:12:53 	iter_accum  = 1
22 Nov 00:12:53 	batch_size*iter_accum  = 2

22 Nov 00:12:53 

22 Nov 00:12:53 ** start training here! **
22 Nov 00:12:53  optimizer=<torch.optim.sgd.SGD object at 0x7f526bd1d438>
22 Nov 00:12:53  LR=<utils.MultiStepLR object at 0x7f526bd1d0b8>
22 Nov 00:12:53    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:12:53 -------------------------------------------------------------------------------------
22 Nov 00:13:01 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:13:44 	--- [START 2017-11-22 00:13:44] ----------------------------------------------------------------
22 Nov 00:13:44 ** some experiment setting **
22 Nov 00:13:44 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:13:44 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:13:44 	initial_checkpoint = None
22 Nov 00:13:44 ** net setting **
22 Nov 00:13:49 <class 'se_inception_v3.SEInception3'>
22 Nov 00:13:49 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:13:49 ** dataset setting **
22 Nov 00:13:49 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:13:49 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:13:49 	len(train_dataset)  = 72
22 Nov 00:13:49 	len(valid_dataset)  = 8
22 Nov 00:13:49 	len(train_loader)   = 36
22 Nov 00:13:49 	len(valid_loadernum_iters) = 4
22 Nov 00:13:49 	batch_size  = 2
22 Nov 00:13:49 	iter_accum  = 1
22 Nov 00:13:49 	batch_size*iter_accum  = 2

22 Nov 00:13:49 

22 Nov 00:13:49 ** start training here! **
22 Nov 00:13:49  optimizer=<torch.optim.sgd.SGD object at 0x7f6ada891048>
22 Nov 00:13:49  LR=<utils.MultiStepLR object at 0x7f6ada8911d0>
22 Nov 00:13:49    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:13:49 -------------------------------------------------------------------------------------
22 Nov 00:13:57 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:16:23 	--- [START 2017-11-22 00:16:23] ----------------------------------------------------------------
22 Nov 00:16:23 ** some experiment setting **
22 Nov 00:16:23 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:16:23 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:16:23 	initial_checkpoint = None
22 Nov 00:16:23 ** net setting **
22 Nov 00:16:28 <class 'se_inception_v3.SEInception3'>
22 Nov 00:16:28 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:16:28 ** dataset setting **
22 Nov 00:16:28 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:16:28 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:16:28 	len(train_dataset)  = 72
22 Nov 00:16:28 	len(valid_dataset)  = 8
22 Nov 00:16:28 	len(train_loader)   = 36
22 Nov 00:16:28 	len(valid_loadernum_iters) = 4
22 Nov 00:16:28 	batch_size  = 2
22 Nov 00:16:28 	iter_accum  = 1
22 Nov 00:16:28 	batch_size*iter_accum  = 2

22 Nov 00:16:28 

22 Nov 00:16:28 ** start training here! **
22 Nov 00:16:28  optimizer=<torch.optim.sgd.SGD object at 0x7fa336e9f438>
22 Nov 00:16:28  LR=<utils.MultiStepLR object at 0x7fa336e9f0f0>
22 Nov 00:16:28    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:16:28 -------------------------------------------------------------------------------------
22 Nov 00:16:37 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:17:04 	--- [START 2017-11-22 00:17:04] ----------------------------------------------------------------
22 Nov 00:17:04 ** some experiment setting **
22 Nov 00:17:04 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:17:04 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:17:04 	initial_checkpoint = None
22 Nov 00:17:04 ** net setting **
22 Nov 00:17:10 <class 'se_inception_v3.SEInception3'>
22 Nov 00:17:10 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:17:10 ** dataset setting **
22 Nov 00:17:10 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:17:10 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:17:10 	len(train_dataset)  = 72
22 Nov 00:17:10 	len(valid_dataset)  = 8
22 Nov 00:17:10 	len(train_loader)   = 36
22 Nov 00:17:10 	len(valid_loadernum_iters) = 4
22 Nov 00:17:10 	batch_size  = 2
22 Nov 00:17:10 	iter_accum  = 1
22 Nov 00:17:10 	batch_size*iter_accum  = 2

22 Nov 00:17:10 

22 Nov 00:17:10 ** start training here! **
22 Nov 00:17:10  optimizer=<torch.optim.sgd.SGD object at 0x7f4a5e47b438>
22 Nov 00:17:10  LR=<utils.MultiStepLR object at 0x7f4a5e47b0f0>
22 Nov 00:17:10    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:17:10 -------------------------------------------------------------------------------------
22 Nov 00:17:18 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:18:37 	--- [START 2017-11-22 00:18:37] ----------------------------------------------------------------
22 Nov 00:18:37 ** some experiment setting **
22 Nov 00:18:37 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:18:37 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:18:37 	initial_checkpoint = None
22 Nov 00:18:37 ** net setting **
22 Nov 00:18:43 <class 'se_inception_v3.SEInception3'>
22 Nov 00:18:43 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:18:43 ** dataset setting **
22 Nov 00:18:43 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:18:43 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:18:43 	len(train_dataset)  = 72
22 Nov 00:18:43 	len(valid_dataset)  = 8
22 Nov 00:18:43 	len(train_loader)   = 36
22 Nov 00:18:43 	len(valid_loadernum_iters) = 4
22 Nov 00:18:43 	batch_size  = 2
22 Nov 00:18:43 	iter_accum  = 1
22 Nov 00:18:43 	batch_size*iter_accum  = 2

22 Nov 00:18:43 

22 Nov 00:18:43 ** start training here! **
22 Nov 00:18:43  optimizer=<torch.optim.sgd.SGD object at 0x7f172f620438>
22 Nov 00:18:43  LR=<utils.MultiStepLR object at 0x7f172f6200b8>
22 Nov 00:18:43    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:18:43 -------------------------------------------------------------------------------------
22 Nov 00:18:51 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:19:19 	--- [START 2017-11-22 00:19:19] ----------------------------------------------------------------
22 Nov 00:19:19 ** some experiment setting **
22 Nov 00:19:19 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:19:19 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:19:19 	initial_checkpoint = None
22 Nov 00:19:19 ** net setting **
22 Nov 00:19:25 <class 'se_inception_v3.SEInception3'>
22 Nov 00:19:25 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:19:25 ** dataset setting **
22 Nov 00:19:25 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:19:25 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:19:25 	len(train_dataset)  = 72
22 Nov 00:19:25 	len(valid_dataset)  = 8
22 Nov 00:19:25 	len(train_loader)   = 36
22 Nov 00:19:25 	len(valid_loadernum_iters) = 4
22 Nov 00:19:25 	batch_size  = 2
22 Nov 00:19:25 	iter_accum  = 1
22 Nov 00:19:25 	batch_size*iter_accum  = 2

22 Nov 00:19:25 

22 Nov 00:19:25 ** start training here! **
22 Nov 00:19:25  optimizer=<torch.optim.sgd.SGD object at 0x7f33f716b0f0>
22 Nov 00:19:25  LR=<utils.MultiStepLR object at 0x7f33f716b470>
22 Nov 00:19:25    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:19:25 -------------------------------------------------------------------------------------
22 Nov 00:19:33 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:21:09 	--- [START 2017-11-22 00:21:09] ----------------------------------------------------------------
22 Nov 00:21:09 ** some experiment setting **
22 Nov 00:21:09 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:21:09 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:21:09 	initial_checkpoint = None
22 Nov 00:21:09 ** net setting **
22 Nov 00:21:14 <class 'se_inception_v3.SEInception3'>
22 Nov 00:21:14 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:21:14 ** dataset setting **
22 Nov 00:21:14 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:21:14 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:21:14 	len(train_dataset)  = 72
22 Nov 00:21:14 	len(valid_dataset)  = 8
22 Nov 00:21:14 	len(train_loader)   = 36
22 Nov 00:21:14 	len(valid_loadernum_iters) = 4
22 Nov 00:21:14 	batch_size  = 2
22 Nov 00:21:14 	iter_accum  = 1
22 Nov 00:21:14 	batch_size*iter_accum  = 2

22 Nov 00:21:14 

22 Nov 00:21:14 ** start training here! **
22 Nov 00:21:14  optimizer=<torch.optim.sgd.SGD object at 0x7f71503eb438>
22 Nov 00:21:14  LR=<utils.MultiStepLR object at 0x7f71503eb0f0>
22 Nov 00:21:14    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:21:14 -------------------------------------------------------------------------------------
22 Nov 00:21:23 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:21:38 	--- [START 2017-11-22 00:21:38] ----------------------------------------------------------------
22 Nov 00:21:38 ** some experiment setting **
22 Nov 00:21:38 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:21:38 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:21:38 	initial_checkpoint = None
22 Nov 00:21:38 ** net setting **
22 Nov 00:21:43 <class 'se_inception_v3.SEInception3'>
22 Nov 00:21:43 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:21:43 ** dataset setting **
22 Nov 00:21:43 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:21:43 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:21:43 	len(train_dataset)  = 72
22 Nov 00:21:43 	len(valid_dataset)  = 8
22 Nov 00:21:43 	len(train_loader)   = 36
22 Nov 00:21:43 	len(valid_loadernum_iters) = 4
22 Nov 00:21:43 	batch_size  = 2
22 Nov 00:21:43 	iter_accum  = 1
22 Nov 00:21:43 	batch_size*iter_accum  = 2

22 Nov 00:21:43 

22 Nov 00:21:44 ** start training here! **
22 Nov 00:21:44  optimizer=<torch.optim.sgd.SGD object at 0x7f5de1b6b6d8>
22 Nov 00:21:44  LR=<utils.MultiStepLR object at 0x7f5de41dbf60>
22 Nov 00:21:44    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:21:44 -------------------------------------------------------------------------------------
22 Nov 00:21:52 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:23:51 	--- [START 2017-11-22 00:23:51] ----------------------------------------------------------------
22 Nov 00:23:51 ** some experiment setting **
22 Nov 00:23:51 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:23:51 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:23:51 	initial_checkpoint = None
22 Nov 00:23:51 ** net setting **
22 Nov 00:23:56 <class 'se_inception_v3.SEInception3'>
22 Nov 00:23:56 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:23:56 ** dataset setting **
22 Nov 00:23:56 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:23:56 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:23:56 	len(train_dataset)  = 72
22 Nov 00:23:56 	len(valid_dataset)  = 8
22 Nov 00:23:56 	len(train_loader)   = 36
22 Nov 00:23:56 	len(valid_loadernum_iters) = 4
22 Nov 00:23:56 	batch_size  = 2
22 Nov 00:23:56 	iter_accum  = 1
22 Nov 00:23:56 	batch_size*iter_accum  = 2

22 Nov 00:23:56 

22 Nov 00:23:57 ** start training here! **
22 Nov 00:23:57  optimizer=<torch.optim.sgd.SGD object at 0x7f47fa91c6d8>
22 Nov 00:23:57  LR=<utils.MultiStepLR object at 0x7f47fcf8cf60>
22 Nov 00:23:57    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:23:57 -------------------------------------------------------------------------------------
22 Nov 00:24:05 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

22 Nov 00:24:19 	--- [START 2017-11-22 00:24:19] ----------------------------------------------------------------
22 Nov 00:24:19 ** some experiment setting **
22 Nov 00:24:19 	out_dir      = /home/xiang/discount2017/results
22 Nov 00:24:19 	saved model    = epoch-14-acc-0.63.pkl
22 Nov 00:24:19 	initial_checkpoint = None
22 Nov 00:24:19 ** net setting **
22 Nov 00:24:25 <class 'se_inception_v3.SEInception3'>
22 Nov 00:24:25 SEInception3 (
  (Conv2d_1a_3x3): BasicConv2d (
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2a_3x3): BasicConv2d (
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_2b_3x3): BasicConv2d (
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_3b_1x1): BasicConv2d (
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True)
  )
  (Conv2d_4a_3x3): BasicConv2d (
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
  )
  (Mixed_5b): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (192 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 192)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5c): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (256 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 256)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_5d): InceptionA (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_1): BasicConv2d (
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True)
    )
    (branch5x5_2): BasicConv2d (
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6a): InceptionB (
    (branch3x3): BasicConv2d (
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3): BasicConv2d (
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (288 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 288)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6b): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6c): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6d): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_6e): InceptionC (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7dbl_5): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7a): InceptionD (
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2): BasicConv2d (
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_1): BasicConv2d (
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_2): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_3): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (branch7x7x3_4): BasicConv2d (
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (768 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 768)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7b): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (1280 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 1280)
        (3): Sigmoid ()
      )
    )
  )
  (Mixed_7c): InceptionE (
    (branch1x1): BasicConv2d (
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_1): BasicConv2d (
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3_2b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_1): BasicConv2d (
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_2): BasicConv2d (
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3a): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch3x3dbl_3b): BasicConv2d (
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True)
    )
    (branch_pool): BasicConv2d (
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True)
    )
    (SELayer): SELayer (
      (avg_pool): AdaptiveAvgPool2d (output_size=1)
      (fc): Sequential (
        (0): Linear (2048 -> 16)
        (1): ReLU (inplace)
        (2): Linear (16 -> 2048)
        (3): Sigmoid ()
      )
    )
  )
  (fc): Linear (2048 -> 5270)
)
22 Nov 00:24:25 ** dataset setting **
22 Nov 00:24:25 	train_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:24:25 	valid_dataset.split =        category  img_id  item_len  item_loc  pic_ind
0    1000010653       0      6979         0        0
1    1000010653       1      7318      6979        0
2    1000004079       2      5455     14297        0
3    1000004141       3      4580     19752        0
4    1000015539       4      6346     24332        0
5    1000010653       5      3711     30678        0
6    1000005744       6      4891     34389        0
7    1000004079       7      4884     39280        0
8    1000010667       8      5565     44164        0
9    1000018290       9      7461     49729        0
10   1000010653      10      8780     57190        0
11   1000018306      11      5854     65970        0
12   1000010961      12     15914     71824        0
13   1000010961      13     15914     71824        1
14   1000010961      14     15914     71824        2
15   1000010961      15     15914     71824        3
16   1000015309      16      6969     87738        0
17   1000010653      17      7078     94707        0
18   1000007361      18      6367    101785        0
19   1000018294      19     10672    108152        0
20   1000014287      20     10942    118824        0
21   1000014287      21     10942    118824        1
22   1000010653      22      4857    129766        0
23   1000005910      23      1727    134623        0
24   1000010653      24     17796    136350        0
25   1000010653      25     17796    136350        1
26   1000010653      26     17796    136350        2
27   1000010653      27     17796    136350        3
28   1000001859      28     13648    154146        0
29   1000001859      29     13648    154146        1
..          ...     ...       ...       ...      ...
80   1000003977      80      7125    451946        0
81   1000005796      81     24003    459071        0
82   1000005796      82     24003    459071        1
83   1000005796      83     24003    459071        2
84   1000005796      84     24003    459071        3
85   1000010653      85      6253    483074        0
86   1000010653      86      7535    489327        0
87   1000013922      87     13032    496862        0
88   1000013922      88     13032    496862        1
89   1000010667      89      8342    509894        0
90   1000010653      90      8423    518236        0
91   1000004141      91      4287    526659        0
92   1000010683      92      3973    530946        0
93   1000010653      93      6554    534919        0
94   1000010641      94      5490    541473        0
95   1000010461      95      2612    546963        0
96   1000010653      96      4617    549575        0
97   1000010653      97      7904    554192        0
98   1000010653      98      5968    562096        0
99   1000010653      99      6525    568064        0
100  1000015309     100      5963    574589        0
101  1000010653     101      2649    580552        0
102  1000010683     102     10568    583201        0
103  1000010683     103     10568    583201        1
104  1000010667     104     25169    593769        0
105  1000010667     105     25169    593769        1
106  1000010667     106     25169    593769        2
107  1000010667     107     25169    593769        3
108  1000014053     108      8664    618938        0
109  1000004085     109      3548    627602        0

[110 rows x 5 columns]
22 Nov 00:24:25 	len(train_dataset)  = 72
22 Nov 00:24:25 	len(valid_dataset)  = 8
22 Nov 00:24:25 	len(train_loader)   = 36
22 Nov 00:24:25 	len(valid_loadernum_iters) = 4
22 Nov 00:24:25 	batch_size  = 2
22 Nov 00:24:25 	iter_accum  = 1
22 Nov 00:24:25 	batch_size*iter_accum  = 2

22 Nov 00:24:25 

22 Nov 00:24:25 ** start training here! **
22 Nov 00:24:25  optimizer=<torch.optim.sgd.SGD object at 0x7fc5eadab438>
22 Nov 00:24:25  LR=<utils.MultiStepLR object at 0x7fc5eadab0f0>
22 Nov 00:24:25    rate   iter   epoch  | valid_loss/acc | train_loss/acc | batch_loss/acc |  time   
22 Nov 00:24:25 -------------------------------------------------------------------------------------
22 Nov 00:24:33 0.0000    0.0 k   0.00  | 1.4923  1.0000 | 0.0000  0.0000 | 0.0000  0.0000 |     0 min 

